Compilation flags:
========================================
Enable : MODEL=HYDRO, GRAVITY, GREP, [MHD]
Disable: UNSPLIT_GRAVITY

EOS    : EOS_GAMMA    (GREP migration test)
         EOS_NUCLEAR  (Post bounce test, Core collapse test and Lightbulb test)

Default setup:
========================================
1. Enable external potential
   --> OPT__EXT_POT = 3
   --> the following function pointers specified in test problem
       will be overridden and automatically rebinded to

      Init_ExtPot_Ptr               = Init_ExtPot_GREP
      Poi_UserWorkBeforePoisson_Ptr = Poi_UserWorkBeforePoisson_GREP
      End_ExtPot_Ptr                = End_ExtPot_GREP

2. For GREP migration:
   --> MAX_LEVEL = 3
   --> GAMMA = 2.0, K = 1.455e5 (in cgs)

3. For Post bounce:
   --> MAX_LEVEL = 8
   --> OPT__DT_USER = 1
   --> OPT__FLAG_USER = 1

4. For Lightbulb:
   --> OPT__DT_USER = 1

5. For Core collapse:
   --> MAX_LEVEL = 9

Note:
========================================
1. A suite of test problems for core-collapse supernova simulations

2. Profiles for initial conditions are put at "IC"
   (1) GREP migration
      tovstar_short               : TOV star

   (2) Post bounce
   --> generated using FLASH with various setups
   --> begin at 15 ms after core bounce

      s20GREP_SFHo_15ms           : SFHo  EoS
      s20GREP_LS220_nonupres_15ms : LS220 EoS, w/o neutrino
      s20GREP_LS220_15ms_none     : LS220 EoS, w/o neutrino, w/o lightbulb
      s20GREP_LS220_15ms_LB1      : LS220 EoS, w/o neutrino, with lightbulb (Lnue = 1.2e52, Tnue = 4 MeV)
      s20GREP_LS220_15ms_LB2      : LS220 EoS, w/o neutrino, with lightbulb (Lnue = 2.2e52, Tnue = 4 MeV)
      s20GREP_LS220_15ms_LB3      : LS220 EoS, w/o neutrino, with lightbulb (Lnue = 4.0e52, Tnue = 4 MeV)
      s20GREP_LS220_15ms_idsa     : LS220 EoS, with IDSA

   (3) Core collapse
   --> s20_W2007                  : 20 solar mass progenitor model of Woosely & Heger (2007)

3. Reference solutions are put at "ReferenceSolution"

4. Python scripts are put at "python_script":
   --> gen_vec_pot.py             : read the runtime parameters in Input_Parameter and Input_TestProb
                                    and generate the vector potential of B field "B_IC"
   --> plot_profile.py            : compute and plot the spherically averaged profile
   --> plot_rhoc_migrationtest.py : plot the evolution of central density with FLASH data (for GREP migration)
   --> plot_rhoc_postbounce.py    : plot the evolution of central density with FLASH data (for Post bounce)
   --> plot_rhoc_corecollapse.py  : plot the evolution of central density with FLASH data (for Core collapse)
   --> plot_slice.py              : slice plot for the specified quantity

5. For MHD simulations, there are two magnetic field profiles supported:
   (1) CCSN_Mag = 0
      A_r = A_theta = 0
      A_p = B0 * varpi^2 * (1 - rho / rho_max)^np * (P / P_max)

   (2) CCSN_Mag = 1
      A_r = A_theta = 0
      A_p = 0.5 * B0 * ( R0^3 / (r^3 + R0^3) ) * r * sin(theta)

   It is recommended to initialize the magnetic field from B_IC to guarantee a divergence-free magnetic field.
   The file B_IC can be generated using gen_vec_pot.py, which will adopt the runtime parameters
   in Input__Parameters and Input__TestProb. The users can adjust the parameters in the script

   --> NLEVEL    : control the number of grid in each dimension, which will be set to NX0_TOT * 2^NLEVEL
   --> num_chunk : number of chunk for computing the vector potential sequentially
                   runs with higher values have better performance, but consume more memory

6. The threshold values in Input__Flag_Rho and Input__Flag_User must be in the code units

7. Additional Record files:
   --> Record__CentralQuant : quantites at the center (cell with highest density)
   --> Record__QuadMom_2nd  : second-order time derivative of mass quadrupole moments
